#+title: Config

* Packages
#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
(package! predd
  :recipe (:host github :repo "skeeto/predd"))
(package! general
  :recipe (:host github :repo "noctuid/general.el"))
(package! ob-async)
(package! pyvenv)
(package! python-black)
(package! paxedit)
(package! w3m)
(package! oauth2)
;;; Added tree sitter
(package! tree-sitter)
(package! tree-sitter-langs)

(package! combobulate
  :recipe (:host github :repo "mickeynp/combobulate"))

(package! dash
  :recipe (:host github
           :repo "magnars/dash.el"))

;; ;; Not working see https://github.com/doomemacs/doomemacs/issues/7235
;; ;; Going to clone the files into my .doom.d instead
;; (unpin! org-evil)
;; (package! org-evil
;;   :recipe (:host github
;;            :repo "GuiltyDolphin/org-evil")
;;            ;; :fork (:host github :repo "ElleNajt/org-evil")
;;            )
;; (straight-use-package
;;  '(org-evil :type git :host github :repo "GuiltyDolphin/org-evil"
;;       :fork (:host github
;;                    :repo "ElleNajtorg-evil")))

;; (package! ts-fold
;;   :recipe (:host github :repo "https://github.com/emacs-tree-sitter/ts-fold/ts-fold.el"))

#+end_src
* External dependencies
** Things to install that this uses:
*** direnv (nix-env -iA nixpkgs.direnv)
*** nix-direnv
** TODO Manage this with home-manager instead https://github.com/nix-community/home-manager
* Config

#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
(defun dired-mode-p () (eq 'dired-mode major-mode))
(defun elle/dired-minus ()
  (interactive)
  (if (dired-mode-p)
      (dired-up-directory)
    (when buffer-file-name
      (-> (buffer-file-name)
          (f-dirname)
          (dired)))))
(map!
 :n "-" #'elle/dired-minus
 (:leader
  "b b" #'ido-switch-buffer
  "a" #'org-capture)
 (:mode emacs-lisp-mode
  :n   "g SPC" #'eval-buffer ))
(defun vterm-cd-to-dired-dir-and-switch ()
  "Change the current directory of the default vterm buffer (as opened with
`+vterm/toggle') to the directory of the current dired buffer, then switch to
it."
  (interactive)
  (let ((dir (dired-current-directory)))
    (if-let* ((projectile-vterm-buffer-name
               (format "*doom:vterm-popup:%s*"
                       (if (bound-and-true-p persp-mode)
                           (safe-persp-name (get-current-persp))
                         "main")))
              (vterm-buffer (get-buffer projectile-vterm-buffer-name)))
        (progn
          (pop-to-buffer vterm-buffer)
          (vterm-send-string (format "cd \"%s\"\n" dir)))
      (message "No currently open vterm (press SPC o t)"))))
(map!
 (:map dired-mode-map
       (:leader "d t" #'vterm-cd-to-dired-dir-and-switch)))

(require 'general)
(general-evil-setup t)
(require 'predd)

(evil-define-operator fireplace-eval (beg end)
  (pp-eval-expression (read (buffer-substring beg end))))

(nmap :keymaps 'emacs-lisp-mode-map
  "c" (general-key-dispatch 'evil-change
        "p" (general-key-dispatch 'fireplace-eval
              "p" 'eval-sexp-at-point
              "c" 'eval-last-sexp
              "d" 'eval-defun)))

(use-package! python-black
  :demand t
  :after python)
(add-hook! 'python-mode-hook #'python-black-on-save-mode)
;; (map! :leader :desc "Blacken Buffer" "m b b" #'python-black-buffer)
;; (map! :leader :desc "Blacken Region" "m b r" #'python-black-region)
;; (map! :leader :desc "Blacken Statement" "m b s" #'python-black-statement)
                                        ;
;; (visual-line-mode 1)
(load! (concat "computers/" (string-trim (shell-command-to-string "hostname"))))
(load! "configs/paxedit")
(load! "configs/orgbabelpython")
(load! "configs/orgmotions")
(load! "configs/orgmode")
(load! (concat "computers/" (string-trim (shell-command-to-string "hostname")) "-after"))

(remove-hook 'doom-first-input-hook #'evil-snipe-mode)

(map!
 :leader
 :desc "Shrink current window vertically" "w <down>" #'shrink-window
 :desc "Enlarge current window vertically" "w <up>" #'enlarge-window
 :desc "Shrink current window horizontally" "w <left>" #'shrink-window-horizontally
 :desc "Enlarge current window horizontally" "w <right>" #'enlarge-window-horizontally)

(after! magit
  (transient-define-suffix magit-reset-head-back ()
    (interactive)
    (magit-reset-mixed "HEAD~"))
  (transient-define-suffix magit-reset-head-previous ()
    (interactive)
    (magit-reset-mixed "HEAD@{1}"))
  (transient-append-suffix
    #'magit-reset
    ["f"]
    (list "b" "Reset HEAD~"    #'magit-reset-head-back))
  (transient-append-suffix
    #'magit-reset
    ["f"]
    (list "o" "Reset HEAD@{1}" #'magit-reset-head-previous)))

(set-popup-rule! "^\\*eww\\*" :ignore t)

(defun never-flymake-mode (orig &rest args)
  (when (and (bound-and-true-p flymake-mode))
    (funcall orig 0)
    (message "disabled flymake-mode")))
(advice-add #'flymake-mode :around #'never-flymake-mode)

(auto-save-visited-mode)
;; (require 'org-evil)
#+end_src

#+RESULTS:
: t
